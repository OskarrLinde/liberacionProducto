@model LotificacionViewModel;
@using LiberacionProductoWeb.Models.Lotificacion
@using Microsoft.Extensions.Localization;
@using LiberacionProductoWeb.Localize;
@using LiberacionProductoWeb.Helpers;
@using System.Globalization;
@using Microsoft.Extensions.Configuration;

@inject IStringLocalizer<Resource> resource;
@inject IConfiguration Configuration

<script src="~/lib/sweetalert/sweetalert2.min.js"></script>

@{
    ViewData["Title"] = "Listado de Lotes";
    Layout = "~/Views/Shared/_LayoutCatalogs.cshtml";

    var btnFind = resource.GetString("BtnFind");
    var btnFilter = resource.GetString("BtnFilter");
    var lengthMenu = resource.GetString("LengthMenu");
    var searchPlaceholder = resource.GetString("SearchPlaceholder");
    var info = resource.GetString("Info");
    var emptyTable = resource.GetString("EmptyTable");
    var paginatefirst = resource.GetString("Paginatefirst");
    var paginatelast = resource.GetString("Paginatelast");
    var pageNext = resource.GetString("PageNext");
    var pagePreviuos = resource.GetString("PagePreviuos");
    var loadingRecords = resource.GetString("LoadingRecords");
    var processing = resource.GetString("Processing");
    var zeroRecords = resource.GetString("ZeroRecords");
    var infoEmpty = resource.GetString("InfoEmpty");
    var infoFiltered = resource.GetString("InfoFiltered");
}

@await Html.PartialAsync("~/Views/Shared/_NavigationCatalogs.cshtml")

<!-- Navigation -->
<div id="top-menu" class="top-menu">
    <!-- begin sidebar scrollbar -->
    <div class="container-fluid">
        <!-- begin sidebar nav -->
        <ul class="nav">

            @if (User.Identity.IsAuthenticated)
            {
                <li>
                    <a asp-controller="LotificacionTanques" asp-action="Lotificacion">
                        @* <i class="fa fa-file-alt"></i> *@
                        <span>Lotificación de Tanques</span>
                    </a>
                </li>
                <li class="active">
                    <a asp-controller="LotificacionTanques" asp-action="ListadoLotes">
                        @* <i class="fa fa-file-alt"></i> *@
                        <span>Listado de Lotes</span>
                    </a>
                </li>
            }
        </ul>
        <!-- end sidebar nav -->
    </div>
    <!-- end sidebar scrollbar -->
</div>

<!-- ============================================================== -->
<!-- Page wrapper  -->
<!-- ============================================================== -->
<div id="content" class="content">

    <!-- begin breadcrumb -->
    <ol class="breadcrumb pull-right">
        <li class="breadcrumb-item"><a href="@Url.Action("Access", "Access")">Inicio</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Catalogs", "CertCatalogos")">Certificados Catálogos</a></li>
        <li class="breadcrumb-item active">Listado de Lotes</li>
    </ol>
    <!-- end breadcrumb -->
    <!-- begin page-header -->
    <h1 class="page-header">Registro de Analisis y Liberacion de lotes</h1>
    <!-- end page-header -->

    <div class="section-container section-with-top-border p-b-5">
        <div class="row" style="display: inline;">
            <div class="panel panel-primary">

                <div class="panel-heading">
                    <h1 class="page-header" style="text-align: center;">
                        Listado de Lotes Creados
                    </h1>
                </div>

                <div class="container_lotificacion">

                    <div class="row  mb-3">
                        <div class="col-md-6 offset-md-3">
                            <div class="row mb-3">
                                <div class="col-md-3">
                                    <label for="dynamicSelectPlant" class="form-label">Planta:</label>
                                </div>
                                <div class="col-md-9">
                                    <select class="selectpicker" data-live-search="true" id="dynamicSelectPlant" name="SelectedOption">
                                        @foreach (var planta in Model.CatPlanta)
                                        {
                                            <option value="@planta.idPlanta">@planta.DescPlanta</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row  mb-3">
                        <div class="col-md-6 offset-md-3">
                            <div class="row mb-3">
                                <div class="col-md-3">
                                    <label for="dynamicSelectProduct" class="form-label">Producto:</label>
                                </div>
                                <div class="col-md-9">
                                    <select class="selectpicker" data-live-search="true" id="dynamicSelectProduct" name="SelectedOption">
                                        <option value="">Seleccione una opción</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row  mb-3">
                        <div class="col-md-4">
                            <div class="row">
                                <div class="col-md-6" style="text-align: right;">
                                    <label for="fechaInicial">Desde:</label>
                                </div>
                                <div class="col-md-6" style="text-align: left;">
                                    <input type="text" class="form-control" id="fechaInicial" name="fechaInicial" readonly>
                                    <i class="fas fa-calendar-alt" style="position: absolute; right: 20px; top: 50%; transform: translateY(-50%); cursor: pointer;"></i>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="row">
                                <div class="col-md-6" style="text-align: right;">
                                    <label for="fechaFinal">Hasta:</label>
                                </div>
                                <div class="col-md-6" style="text-align: left;">
                                    <input type="text" class="form-control" id="fechaFinal" name="fechaFinal" readonly>
                                    <i class="fas fa-calendar-alt" style="position: absolute; right: 20px; top: 50%; transform: translateY(-50%); cursor: pointer;"></i>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 pull-right">
                            <div class="btn-container">
                                <button id="ConsultaListadoLotesBtn">Consultar</button>
                            </div>
                        </div>
                    </div>

                    <div class="row  mb-3">
                        <div class="btn-group pull-left">
                            <a href="javascript:;" class="btn btn-white m-r-5" id="ExporttoExcel">
                                <i class="fa fa-file-excel"></i> Exportar a excel
                            </a>
                        </div>
                    </div>

                    <!-- Mensaje de error -->
                    <div class="col-md-12" id="message"></div>

                    <div class="container_lotificacion">
                        <div class="row  mb-3">
                            <div class="col-12">
                                <div class="table-responsive">
                                    <table id="lotificacionTable" class="table table-bordered table-hover " style="width:100%">
                                        <thead>
                                            <tr>
                                                <th></th>
                                                <th class="hiddenListadoLotes_Analisis">idAnalisis</th>
                                                <th>No. Lote</th>
                                                <th>Lote de Origen</th>
                                                <th>Tanque</th>
                                                <th>Nivel Inicial</th>

                                                <th class="hiddenListadoLotes_Maestra">Nivel Inicial Valor</th>
                                                <th class="hiddenListadoLotes_Maestra">Unidad Medida Valor Inicial</th>

                                                <th>Nivel Final</th>

                                                <th class="hiddenListadoLotes_Maestra">Nivel Final Valor</th>
                                                <th class="hiddenListadoLotes_Maestra">Unidad Medida Valor Final</th>

                                                <th>Comentarios</th>
                                                <th>Fecha Alta</th>
                                                <th>Estatus</th>

                                                <th class="hiddenListadoLotes_Maestra">Estatus Revisión</th>

                                                <th>Estatus Revisión</th>
                                                <th>Creado por</th>
                                                <th class="hiddenListadoLotes_user">user</th>
                                                <th></th>
                                            </tr>
                                            <tr>
                                                <th></th>
                                                <th class="hiddenListadoLotes_Analisis"><input type="text" placeholder="" /></th>
                                                <th class="noLoteDesc"><input type="text" placeholder="" /></th>
                                                <th><input type="text" placeholder="" /></th>
                                                <th><input type="text" placeholder="" /></th>
                                                <th><input type="text" placeholder="" /></th>

                                                <th class="hiddenListadoLotes_Maestra"><input type="text" placeholder="" /></th> @* Nivel Inicial Valor *@
                                                <th class="hiddenListadoLotes_Maestra"><input type="text" placeholder="" /></th> @* Unidad Medida Valor Inicial *@

                                                <th><input type="text" placeholder="" /></th>

                                                <th class="hiddenListadoLotes_Maestra"><input type="text" placeholder="" /></th> @* Nivel Final Valor *@
                                                <th class="hiddenListadoLotes_Maestra"><input type="text" placeholder="" /></th> @* Unidad Medida Valor Final *@

                                                <th><input type="text" placeholder="" /></th>
                                                <th><input type="text" placeholder="" /></th>
                                                <th><input type="text" placeholder="" /></th>

                                                <th class="hiddenListadoLotes_Maestra"><input type="text" placeholder="" /></th>

                                                <th><input type="text" placeholder="" /></th>
                                                <th><input type="text" placeholder="" /></th>
                                                <th class="hiddenListadoLotes_user"><input type="text" placeholder="" /></th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Styles {


    <link href="~/plugins/bootstrap-combobox/css/bootstrap-combobox.css" rel="stylesheet" />
    <link href="~/plugins/bootstrap-select/bootstrap-select.css" rel="stylesheet" />
    <link href="~/plugins/select2/dist/css/select2.min.css" rel="stylesheet" />
    <link href="~/plugins/bootstrap-calendar/css/bootstrap_calendar.css" rel="stylesheet" />


    <link href="~/plugins/DataTables/media/css/dataTables.bootstrap.min.css" rel="stylesheet" />
    <link href="~/plugins/DataTables/extensions/Responsive/css/responsive.bootstrap.min.css" rel="stylesheet" />
    <link href="~/plugins/DataTables/extensions/Buttons/css/buttons.bootstrap.min.css" rel="stylesheet" />

    <link href="~/plugins/gritter/css/jquery.gritter.css" rel="stylesheet" />

    <link href="~/plugins/jquery/jquery.dataTables.min.css" rel="stylesheet" />
}

@section scripts {

    <environment names="Development,Staging,Production">
        <script src="~/plugins/bootstrap-calendar/js/bootstrap_calendar.min.js"></script>

        <script src="~/plugins/gritter/js/jquery.gritter.js"></script>

        <script src="~/plugins/bootstrap-combobox/js/bootstrap-combobox.js"></script>
        <script src="~/plugins/bootstrap-select/bootstrap-select.js"></script>
        <script src="~/plugins/select2/dist/js/select2.min.js"></script>


        <script src="~/plugins/bootstrap-calendar/js/bootstrap_calendar.min.js"></script>

        <script src="~/plugins/DataTables/media/js/dataTables.bootstrap.min.js"></script>

        <script src="~/plugins/DataTables/media/js/jquery.dataTables.js"></script>
        <script src="~/plugins/DataTables/media/js/dataTables.bootstrap.min.js"></script>
        <script src="~/plugins/DataTables/extensions/Responsive/js/dataTables.responsive.min.js"></script>

        <script src="~/plugins/DataTables/extensions/Buttons/js/buttons.html5.min.js"></script>
        <script src="~/plugins/DataTables/extensions/Buttons/js/buttons.print.min.js"></script>
        <script src="~/plugins/DataTables/extensions/Buttons/js/dataTables.buttons.min.js"></script>

        <script src="~/plugins/gritter/js/jquery.gritter.js"></script>
        <script src="~/plugins/bootbox/js/bootbox.all.min.js"></script>

        <script src="~/js/demo.min.js"></script>
        <script src="~/js/apps.min.js"></script>
        <script src="~/js/catalogs.js"></script>
    </environment>

    <script>
        var commonUrl = @Json.Serialize(@Configuration.GetSection("publishUrl").GetSection("commonUrl").Value)

        console.log(commonUrl);

        var pb = {
            base: commonUrl
        };

        $(function () {

            if ('@Model.MensajeError'.length > 1) {
                $('#message').append('<div class="alert alert-danger"> <a class="close" data-dismiss="alert" href="#">&times;</a>@Model.MensajeError </div>');
            }
        });

        $(function () {

            if ('@Model.MensajeInfo'.length > 1) {
                $('#message').append('<div class="alert alert-success"> <a class="close" data-dismiss="alert" href="#">&times;</a>@Model.MensajeInfo </div>');
            }
        });

        $(document).ready(function () {

            App.init();
            Demo.init();

            var idUsuarioLogueado = @Model.ExternalId;

            // Obtener la fecha actual
            var today = new Date();

            // Establecer el día 1 del mes actual
            var firstDay = new Date(today.getFullYear(), today.getMonth(), 1);

            // Formatear las fechas en el formato deseado (por ejemplo, dd/mm/yy)
            var formatDate = function(date)
            {
                var day = ("0" + date.getDate()).slice(-2);
                var month = ("0" + (date.getMonth() + 1)).slice(-2);
                var year = date.getFullYear(); return day + "/" + month + "/" + year;
            };

            var idPlantaSeleccionado = $('#dynamicSelectPlant').val();
            var idProductoValueSeleccionado = null;

             // $('#fechaInicial, #fechaFinal').datepicker({ dateFormat: 'yy-mm-dd' });
            // Configurar el datepicker con la fecha inicial preseleccionada
            $("#fechaInicial").datepicker({
                dateFormat: "dd/mm/yy",
                defaultDate: firstDay
            }).datepicker("setDate", firstDay);

            // Configurar el datepicker con la fecha final preseleccionada
            $("#fechaFinal").datepicker({
                dateFormat: "dd/mm/yy",
                defaultDate: today
            }).datepicker("setDate", today);

             // Hacer que el icono del calendario abra el datepicker
            $('.fa-calendar-alt').on('click', function()
            {
                $(this).siblings('input').focus();
            });

            function cargarProductosPorPlanta(plantaId) {
                if (plantaId) {
                    $.ajax({
                        type: "GET",
                        url: pb.base + "/LotificacionTanques/ObtenerProductosPorPlanta",
                        data:
                        {
                            plantaId: plantaId
                        },
                        success: function (response) {
                            console.log("Respuesta del servidor: ", response);
                            $("#dynamicSelectProduct").empty()
                                .append($('<option>',
                                    {
                                        value: '',
                                        text: 'Seleccione un producto'
                                    }));
                            $("#dynamicSelectProduct").prop("disabled", false);
                            if (Array.isArray(response.data)) {
                                response.data.forEach(function (item) {
                                    $("#dynamicSelectProduct").append($('<option>',
                                        {
                                            value: item.idProducto,
                                            text: item.descProducto
                                        }));
                                });
                            }
                            else {
                                console.error("La respuesta no es un array. Estructura inesperada.");
                            }

                            $('#dynamicSelectProduct').selectpicker('refresh');
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            console.error("Error en la solicitud AJAX: ", textStatus, errorThrown);
                        }
                    });
                }
            }

            cargarProductosPorPlanta(idPlantaSeleccionado);

            $('.selectpicker').selectpicker({ noneSelectedText: 'Seleccione una opción' });

            $('#dynamicSelectPlant').change(function () {
                var plantaId = $(this).val();

                //**********/
                //Limpia Valores a Default

                //**********/

                if (plantaId) {
                    $.ajax({
                        type: "GET",
                        url: pb.base + "/LotificacionTanques/ObtenerProductosPorPlanta?plantaId=" + plantaId,
                        success: function (response) {
                            // console.log(response);
                            $("#dynamicSelectProduct").empty();
                            $("#dynamicSelectProduct").prop("disabled", false);
                            $('#dynamicSelectProduct').append($('<option>',
                                {
                                    value: '',
                                    text: 'Seleccione un producto'
                                }));

                            response.data.forEach(function (item) {
                                $("#dynamicSelectProduct").append($('<option>', {
                                    value: item.idProducto,
                                    text: item.descProducto
                                }));
                            });

                            $('#dynamicSelectProduct').selectpicker('refresh');
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            console.error("Error en la solicitud AJAX: ", textStatus, errorThrown);
                        }
                    });
                }
                else {
                    $('#dynamicSelectProduct').empty().append($('<option>',
                        {
                            value: '',
                            text: 'Seleccione un producto'
                        }));
                }
            });

            function normalizeString(str) {
                if (typeof str === 'string')
                {
                    return str.normalize('NFD').replace(/[\u0300-\u036f]/g, '').toLowerCase();
                }
                return ''; // Devuelve una cadena vacía si `str` no es una cadena
            }

            function normalizeData(data)
            {
                if (data === null || data === undefined)
                {
                    return '';
                }
                return normalizeString(data.toString());
            }

            $.fn.dataTable.ext.type.search.string = function (data)
            {
                return !data ? '' : typeof data === 'string' ? normalizeData(data) : data;
            };

            //variable para almacenar los mensajes de IdAnalisis cuando se cancela y mostrar en el detalle del registro sin que tenga que realiazr la busqueda de nuevo
            var mensajes = {};

            $('#ConsultaListadoLotesBtn').on('click', function ()
            {
                idPlantaSeleccionado = $('#dynamicSelectPlant').val();
                idProductoValueSeleccionado = $('#dynamicSelectProduct').val();
                // Validación para asegurarse de que se selecciona un producto
                if (!idProductoValueSeleccionado) {
                    alert("Por favor, seleccione un producto.");
                    return;
                    // Salir del evento si no hay producto seleccionado
                }

                // Obtener valores de los inputs de tipo date
                var fechaInicial = $('#fechaInicial').val();
                 console.log(fechaInicial);

                var fechaFinal = $('#fechaFinal').val();
                 console.log(fechaFinal);

                // Validar que los campos no estén vacíos y sean fechas válidas
                if (!fechaInicial || !fechaFinal) {
                    alert('Ambas fechas son obligatorias.');
                    return false;
                }

                // // Función para convertir fechas en formato DD/MM/YYYY a YYYY-MM-DD
                function convertirFecha(formatoFecha) {
                    var partes = formatoFecha.split('/');
                    var fechaISO = new Date(Date.UTC(partes[2], partes[1] - 1, partes[0]));
                    return fechaISO.toISOString().slice(0, 10);
                }

                var fechaInicialISO = convertirFecha(fechaInicial);
                var fechaFinalISO = convertirFecha(fechaFinal);

                // Validar que la fecha inicial no sea mayor que la fecha final
                if (fechaInicialISO > fechaFinalISO) {
                    alert('La fecha inicial no puede ser mayor que la fecha final.');
                    return false;
                }

                // Verificar si la tabla ya está inicializada y destruirla si es necesario
                if ($.fn.dataTable.isDataTable('#lotificacionTable'))
                {
                    $('#lotificacionTable').DataTable().clear().destroy();
                    // console.log('DataTable ya estaba inicializado, se destruyó y se volverá a inicializar.');
                }

                var datosBusqueda = {
                    IdPlanta: idPlantaSeleccionado,
                    IdProducto: idProductoValueSeleccionado,
                    FechaInicial: fechaInicialISO,
                    FechaFinal: fechaFinalISO
                };

                $.ajax({
                    type: 'GET',
                    url: pb.base + '/LotificacionTanques/ObtenerAnalisisTanque',
                    data: datosBusqueda,

                    success: function (response) {
                        // Variable para almacenar el estado de búsqueda de cada columna
                        var searchStates = {};

                        // Destruir el DataTable existente si ya está inicializado
                        if ($.fn.DataTable.isDataTable('#lotificacionTable'))
                        {
                            $('#lotificacionTable').DataTable().clear().destroy();
                        }

                        function normalizeString(str) {
                            if (typeof str === 'string') { return str.normalize('NFD').replace(/[\u0300-\u036f]/g, '').toLowerCase(); } return ''; // Devuelve una cadena vacía si `str` no es una cadena
                        }

                        response.forEach(function (item) {
                            item.idAnalisisNormalized = normalizeData(item.idAnalisis);
                            item.idLoteNormalized = normalizeData(item.idLote);
                            item.loteOrigenNormalized = normalizeData(item.loteOrigen);
                            item.idTanqueNormalized = normalizeData(item.idTanque);
                            item.nivelIniNormalized = normalizeData(item.nivelIni);
                            item.nivelFinNormalized = normalizeData(item.nivelFin);
                            item.comentariosNormalized = normalizeData(item.comentarios);
                            item.fechaAltaNormalized = normalizeData(item.fechaAlta);
                            item.estatusNormalized = normalizeData(item.estatus);
                            item.estatus_RevisionNormalized = normalizeData(item.estatus_Revision);
                            item.usrAltaNormalized = normalizeData(item.usrAlta);
                            if (item.detalles) {
                                item.detalles.forEach(function (detalle)
                                {
                                    detalle.descParametroNormalized = normalizeData(detalle.descParametro);
                                    detalle.valorLimiteInfNormalized = normalizeData(detalle.valorLimiteInf);
                                    detalle.valorLimiteSupNormalized = normalizeData(detalle.valorLimiteSup);
                                    detalle.valorAnalisisNormalized = normalizeData(detalle.valorAnalisis);
                                    detalle.idAnalizadorNormalized = normalizeData(detalle.idAnalizador);
                                    detalle.idMetodoNormalized = normalizeData(detalle.idMetodo);
                                    detalle.descUnidadMedidaNormalized = normalizeData(detalle.descUnidadMedida);
                                });
                            }
                        });

                        var originalData = JSON.parse(JSON.stringify(response)); // Guardar una copia de los datos originales

                        console.log(originalData);

                        // Inicializar DataTable con datos recibidos
                        var table = $('#lotificacionTable').DataTable({
                            // "scrollX": true, // Habilitar desplazamiento horizontal
                            // "autoWidth": false, // Desactivar el auto-anchura para que pueda controlarse mediante CSS
                            "ordering": true, // Deshabilitar la opción de ordenar
                            "order": [[1, "desc"]],
                            "searching": false,
                            "data": originalData,
                            "lengthMenu": [5, 10, 25, 50, 100], // Opciones para mostrar registros por página
                            "columns": [
                                {
                                    "className": 'details-control',
                                    "orderable": false,
                                    "data": null,
                                    "defaultContent": ''
                                },
                                { "data": "idAnalisis", "className": "hiddenListadoLotes_Analisis" },
                                { "data": "idLote", "className": "noLoteDesc" },
                                { "data": "loteOrigen" },
                                { "data": "idTanque" },
                                { "data": "nivelIni", "className": "nivelinicial" },

                                { "data": "nivelIniVal", "className": "hiddenListadoLotes_NIValue" },
                                { "data": "umInicial", "className": "hiddenListadoLotes_UMNIValue" },

                                { "data": "nivelFin", "className": "nivelfinal" },

                                { "data": "nivelFinVal", "className": "hiddenListadoLotes_NFValue" },
                                { "data": "umFinal", "className": "hiddenListadoLotes_UMNFValue" },


                                { "data": "comentarios" },
                                { "data": "fechaAlta" },
                                //{ "data": "estatus" },
                                { "data": "estatus",
                                    "render": function (data, type, row, meta)
                                    {
                                        if (data && data.includes('CANCELADO'))
                                        {
                                            return '<span class="red-text">' + data + '</span>';
                                        }
                                        return data !== null ? data : '';
                                    }
                                },
                                { "data": "permisoRevisionLote", "className": "hiddenListadoLotes_permisoRevisionLote" },
                                {
                                    "data": "estatus_Revision", "className":"estatusRevisionText",
                                    "defaultContent": "N/A",
                                    "render": function (data, type, row, meta) {
                                        return data;
                                        // if (row.permisoRevisionLote ) {
                                           // return '<span class="red-text">' + data + '</span>';
                                        // }
                                        // return "N/A"; // Valor predeterminado para la columna "Estatus Revisión"
                                    }
                                },
                                { "data": "usrAlta" },
                                { "data": "getUseralta", "className": "hiddenListadoLotes_user" },
                                {
                                    "data": null,
                                    "defaultContent": "",
                                    "render": function (data, type, row, meta) {

                                        // if (row.permisoUser && (row.estatus == 'CANCELADO')) {
                                        //     return '<button class="btn btn-success reactivar-btnRow" disabled>Reactivar</button>';
                                        // }
                                        // else if (row.permisoUser && (row.estatus != 'CANCELADO')) {
                                        //     return '<button class="btn btn-primary editar">Editar</button>';
                                        // }
                                        // else
                                        // {
                                        //     return '';
                                        // }

                                        if (row.permisoUser && (row.estatus == 'CANCELADO')) {
                                            // return '<button class="btn btn-success reactivar-btnRow" disabled>Reactivar</button>';
                                                 return '';
                                        }
                                        else if (row.permisoUserAdmin && (row.estatus != 'CANCELADO')) {
                                            return '<button class="btn btn-primary canclote">Cancelar Lote</button>';
                                        }
                                        else if (!row.permisoUserAdmin && row.permisoUser && (row.estatus != 'CANCELADO')) {
                                            return '<button class="btn btn-primary editarlote">Editar Lote</button>';
                                        }
                                        else
                                        {
                                            return '';
                                        }
                                    }
                                },
                            ],
                            "language":
                            {
                                "emptyTable": "No hay datos disponibles en la tabla",
                                "info": "Mostrando _START_ a _END_ de _TOTAL_ registros",
                                "infoEmpty": "Mostrando 0 a 0 de 0 registros",
                                "infoFiltered": "(filtrado de _MAX_ registros totales)",
                                "lengthMenu": "Mostrar _MENU_ registros",
                                "loadingRecords": "Cargando...",
                                "processing": "Procesando...",
                                // "search": "Buscar:",
                                "zeroRecords": "No se encontraron registros coincidentes",
                                "paginate":
                                {
                                    "first": "Primero",
                                    "last": "Último",
                                    "next": "Siguiente",
                                    "previous": "Anterior"
                                },
                                "aria":
                                {
                                    "sortAscending": "",
                                    "sortDescending": ""
                                }
                            },

                            "initComplete": function (settings, json)
                            {
                                this.api().columns().every(function ()
                                {
                                    this.header().classList.remove('sorting'); // Quitar iconos de ordenamiento
                                    this.header().classList.remove('sorting_asc');
                                    this.header().classList.remove('sorting_desc');
                                });

                                $('#lotificacionTable thead th').removeClass('sorting sorting_asc sorting_desc');

                                // Deshabilitar el clic en todos los `th` dentro de `thead`
                                $('#lotificacionTable thead th').off('click.DT');

                                // Limpiar los inputs de búsqueda en el segundo `tr` dentro de `thead`
                                $('#lotificacionTable thead tr:nth-child(2) th input').val('');

                                var searchBox = $('.dataTables_filter input'); searchBox.off('input').on('input', function () {
                                    var searchValue = normalizeData(this.value); // Normalizar la cadena de búsqueda

                                    // Actualizar el estado de búsqueda de la columna actual
                                    var filteredData = response.filter(function(item)
                                    {
                                        return item.idAnalisisNormalized.includes(searchValue) ||
                                                item.idLoteNormalized.includes(searchValue) ||
                                                item.loteOrigenNormalized.includes(searchValue) ||
                                                item.idTanqueNormalized.includes(searchValue) ||
                                                item.nivelIniNormalized.includes(searchValue) ||
                                                item.nivelFinNormalized.includes(searchValue) ||
                                                item.comentariosNormalized.includes(searchValue) ||
                                                item.fechaAltaNormalized.includes(searchValue) ||
                                                item.estatusNormalized.includes(searchValue) ||
                                                item.estatus_RevisionNormalized.includes(searchValue) ||
                                                item.usrAltaNormalized.includes(searchValue);
                                    });
                                    table.clear().rows.add(filteredData).draw();
                                });

                                $('#lotificacionTable thead tr:eq(1) th').each(function (i)
                                {
                                    $('input', this).on('keyup change clear', function ()
                                    {
                                        var searchValue = normalizeData(this.value); // Normalizar la cadena de búsqueda

                                        // Actualizar el estado de búsqueda de la columna actual
                                        searchStates[i] = searchValue;

                                        // Filtrar los datos en función del estado de búsqueda de todas las columnas
                                        var filteredData = response.filter(function (item) {
                                            for (var colIndex in searchStates) {
                                                console.log(colIndex);
                                                var columnName;
                                                switch (parseInt(colIndex))
                                                {
                                                    case 1:
                                                        columnName = 'idAnalisisNormalized';break;
                                                    case 2:
                                                        columnName = 'idLoteNormalized'; break;
                                                    case 3:
                                                        columnName = 'loteOrigenNormalized'; break;
                                                    case 4:
                                                        columnName = 'idTanqueNormalized'; break;
                                                    case 5:
                                                        columnName = 'nivelIniNormalized'; break;
                                                    case 8:
                                                        columnName = 'nivelFinNormalized'; break;
                                                    case 11:
                                                        columnName = 'comentariosNormalized'; break;
                                                    case 12:
                                                        columnName = 'fechaAltaNormalized'; break;
                                                    case 13:
                                                        columnName = 'estatusNormalized'; break;
                                                    case 15:
                                                        columnName = 'estatus_RevisionNormalized'; break;
                                                    case 16:
                                                        columnName = 'usrAltaNormalized'; break;
                                                    default: columnName = '';
                                                }
                                                if (columnName && !item[columnName].includes(searchStates[colIndex]))
                                                {
                                                    return false;
                                                }
                                            }
                                            return true;
                                        });

                                        table.clear().rows.add(filteredData).draw();

                                        // Después de cada búsqueda, eliminar iconos de ordenamiento
                                        $('#lotificacionTable thead th').removeClass('sorting sorting_asc sorting_desc');

                                    });
                                });
                            }
                        });

                        // Desasociar cualquier controlador anterior y asociar el nuevo
                        $(document).off('click', '#lotificacionTable tbody td.details-control').on('click', '#lotificacionTable tbody td.details-control', function () {
                            var tr = $(this).closest('tr');
                            var row = table.row(tr);


                            if (row.child.isShown()) {
                                row.child.hide();
                                tr.removeClass('shown');

                                var rowData = row.data();
                                var actionsCell = tr.find('td:last');


                                // if (!row.permisoUserAdmin && row.permisoUser && (row.estatus != 'CANCELADO'))

                                if(rowData.permisoUser && (rowData.estatus != 'CANCELADO'))
                                {
                                    actionsCell.html('<button class="btn btn-primary editarlote">Editar Lote</button>');

                                    var cellValueNivelInicial = tr.find(".nivelinicial");
                                    var ValueNivelInicial = tr.find(".hiddenListadoLotes_NIValue").text();
                                    var ValueNivelInicialUM = tr.find(".hiddenListadoLotes_UMNIValue").text();
                                    cellValueNivelInicial.html(ValueNivelInicial + (ValueNivelInicialUM == "25" ? " kg" : " psig"));

                                    var cellValueNivelFinal = tr.find(".nivelfinal");
                                    var ValueNivelFinal = tr.find(".hiddenListadoLotes_NFValue").text();
                                    var ValueNivelFinalUM = tr.find(".hiddenListadoLotes_UMNFValue").text();
                                    cellValueNivelFinal.html(ValueNivelFinal + (ValueNivelFinalUM == "25" ? " kg" : " psig"));
                                }

                            }
                            else {
                                var rowData = row.data();
                                console.log("Info a mostrar: ");
                                console.log(rowData);
                                if (rowData && rowData.hasOwnProperty('detalles')) {
                                    var detalle = rowData.detalles;
                                    row.child(generarDetalle(detalle, rowData.idAnalisis, false, rowData.permisoRevisionLote, rowData.estatus_RevisionVal)).show();
                                    tr.addClass('shown');
                                }
                                else {
                                    console.error('Detalles no definidos para esta fila.');
                                }

                                var actionsCell = tr.find('td:last');

                                    if(rowData.permisoUser && (rowData.estatus != 'CANCELADO'))
                                {
                                    actionsCell.html('<button class="btn btn-primary editarlote">Editar Lote</button>');
                                }
                            }
                        });

                        function generarDetalle(detalleData, rowIdAnalisis, flagPermisoUser, flagPermisoRevisionEstatus, estatus_RevisionVal) {
                            // console.log("Objeto recibido: ");
                            console.log(detalleData);

                            // console.log("IdAnalisis: ");
                            // console.log(rowIdAnalisis);

                            var mensajeGuardado = "";

                            // Verifica si el objeto mensajes tiene al menos un registro
                            if (Object.keys(mensajes).length > 0)
                            {
                                // Verifica si existe un mensaje para el idAnalisis
                                if (mensajes.hasOwnProperty(rowIdAnalisis))
                                {
                                    mensajeGuardado = mensajes[rowIdAnalisis];
                                }
                                // console.log("Prueba: ");
                                // console.log(mensajes);
                            }

                            var mensaje = "";
                            if (detalleData[0].motivoCancelBitacora !== null)
                            {
                                var motivoCancelBitacora = detalleData[0].motivoCancelBitacora;
                                var FechaCancelBitacora = detalleData[0].fechaCancelBitacora;
                                var UserCancelBitacora = detalleData[0].userNameCancelBitacora == null ? '' : detalleData[0].userNameCancelBitacora;

                                mensaje = "<span style='color:red;'>ESTE LOTE FUE CANCELADO POR <strong>" + UserCancelBitacora + "</strong>. El dia " + FechaCancelBitacora + "<br> JUSTIFICACION: <strong>" + motivoCancelBitacora + "</strong> </span>";
                            }
                            else if(mensajeGuardado != "")
                            {
                                mensaje = mensajeGuardado;
                            }

                            var permisoRevisionEstatusDetalleHtml = '';
                            console.log(flagPermisoRevisionEstatus);
                            console.log(estatus_RevisionVal);
                            if (flagPermisoRevisionEstatus && estatus_RevisionVal == 3) //PENDIENTE
                            {
                                       permisoRevisionEstatusDetalleHtml = ' <br> <div id="idestatusrevision" class="mt-3 target-div">' +
                                                        '<div class="row">' +
                                                           '<div class="col-12 text-left">' + // Botones alineados a la izquierda ocupando 12 columnas
                                                              '<button class="cumplelote">Cumple</button>' +
                                                              '<button class="nocumplelote">No Cumple</button>' +
                                                           '</div>' +
                                                        '</div>' +
                                                        '<div class="row mt-2">' +
                                                           '<div class="col-12">' + // Textarea ocupando 12 columnas
                                                              '<textarea class="form-control" id="comentarios_estatusrevision" placeholder="Escribe tus comentarios aquí..."></textarea>' +
                                                           '</div>' +
                                                        '</div>' +
                                                        '</div> <br>';
                            }


                            var detalleHtml = permisoRevisionEstatusDetalleHtml + ' <div id="targetMensaje" class="mt-3 target-div">' + mensaje + '</div><br><table class="compact-table tablecentradamin" border="0" >';

                            // Verificar si flagPermisoRevisionEstatus es igual a "PENDIENTE"
                           


                            detalleHtml += '<tr>' +
                                '<th class="hiddenListadoLotes_detail">IdPlanta</th>' +
                                '<th class="hiddenListadoLotes_detail">IdParámetro</th>' +
                                '<th class="hiddenListadoLotes_detail">IdAnalisisDetail</th>' +
                                '<th>Parámetro</th>' +
                                '<th>Límite Inferior</th>' +
                                '<th>Límite Superior</th>' +
                                '<th>Valor Análisis</th>' +
                                '<th>Unidad de Medida</th>' +
                                '<th>Analizador</th>' +
                                '<th class="hiddenListadoLotes_analizador">Analizador</th>' +
                                '<th class="hiddenLotificacion_UM">&nbsp;</th>' +
                                '<th class="hiddenLotificacion_UM">&nbsp;</th>' +
                                '<th class="hiddenLotificacion_UM">Analizador Original</th>' +
                                '<th class="hiddenListadoLotes_detail">Método Analítico</th>' +
                                '<th class="hiddenListadoLotes_detail idMetodoOriginal">Método Analítico Original</th>' +
                                '<th>Método Analítico Original</th>' +
                                '<th class="hiddenListadoLotes_detail">Método Analítico Original desc</th>';

                                // Agregar columna adicional si permisoUsuario es true
                                if (flagPermisoUser)
                                {
                                    detalleHtml += '<th>.</th>';
                                }

                                detalleHtml += '</tr>'

                            detalleData.forEach(function (item) {
                                detalleHtml += '<tr>' +
                                    '<td class="hiddenListadoLotes_detail idPlantaDetalle">' + item.idPlanta + '</td>' +
                                    '<td class="hiddenListadoLotes_detail idParametroDetalle">' + item.idParametro + '</td>' +
                                    '<td class="hiddenListadoLotes_detail idAnalisisDetalle">' + item.idAnalisisDetail + '</td>' +
                                    '<td class="descParametroRow">' + item.descParametro + '</td>' +
                                    '<td class="valorLimiteInf">' + item.valorLimiteInf + '</td>' +
                                    '<td class="valorLimiteSup">' + item.valorLimiteSup + '</td>' +
                                    '<td class="idValorAnalisis">' + item.valorAnalisis + '</td>' +
                                    '<td>' + item.descUnidadMedida + '</td>' +
                                    '<td class="idAnalizador">' + item.idAnalizador + '</td>' +
                                    '<td class="hiddenListadoLotes_analizador descAnalizador">' + item.idAnalizador + '</td>' +
                                    '<td class="hiddenLotificacion_UM idAnalizadorValue">' + item.idAnalizadorVal + '</td>' +
                                    '<td class="hiddenLotificacion_UM idAnalizadorValueDesc">' + item.idAnalizador +' </td>' +
                                    '<td class="hiddenListadoLotes_analizador IdAnalizadorOriginal">' + item.idAnalizadorVal + '</td>' +
                                    '<td class="hiddenListadoLotes_detail idMetodo">' + item.idMetodoVal + '</td>' +
                                    '<td class="hiddenListadoLotes_detail idMetodoOriginal">' + item.idMetodoVal + '</td>' +
                                    '<td class="descdMetodoOriginal">' + item.idMetodo + '</td>' +
                                    '<td class="hiddenListadoLotes_detail descdMetodoOriginaldesc">' + item.idMetodo + '</td>' ;

                                    // Agregar botón de acción si permisoUsuario es true
                                    if (flagPermisoUser)
                                    {
                                        detalleHtml += '<td><button class="editarparametro">✏️</button></td>';
                                    }

                                   detalleHtml += '</tr>';
                            });
                            detalleHtml += '</table>';




                            return detalleHtml;
                        }

                        // Almacena los datos originales antes de la cancelacion
                        var originalData = {};

                        function validateInput(event) {
                            this.value = this.value.replace(/[^0-9.]/g, '');
                            if ((this.value.match(/\./g) || []).length > 1) {
                                this.value = this.value.replace(/\.+$/, "");
                            }
                            // Permitir hasta 4 dígitos después del punto decimal
                            if (this.value.includes('.')) {
                                var parts = this.value.split('.');
                                parts[1] = parts[1].substring(0, 5);
                                this.value = parts.join('.');
                            }
                        }

                        // Manejar el evento de clic en el botón "Editar Lote"
                        // Asociar el nuevo evento
                        $(document).off('click', '#lotificacionTable tbody .editarlote').on('click', '#lotificacionTable tbody .editarlote', function () {
                            var tr = $(this).closest('tr');
                            var row = table.row(tr);
                            var IdAnalisisRow = tr.find('.hiddenListadoLotes_Analisis').text().trim();

                            //Expandir la tabla de detalle de el registro cuando da click al boton de editar lote
                            var rowData = row.data();
                            if (rowData && rowData.hasOwnProperty('detalles')) {
                                var detalle = rowData.detalles;
                                row.child(generarDetalle(detalle, rowData.idAnalisis, true, false, rowData.estatus_RevisionVal)).show();
                                tr.addClass('shown');

                                // Aqui iria la logica de edicion por cada registro mostrado en la tabla de deetalle
                                tr.find('td:last').html('<button class="btn btn-success guardarLoteEditado">Guardar Lote</button>'+
                                                        '<button class="btn btn-danger cancelarLoteEditado">Cancelar</button>');
                            }

                            var cellValorNivelInicial = tr.find(".nivelinicial");
                            var cellValorNivelInicialOriginal = tr.find(".hiddenListadoLotes_NIValue");
                            var cellValorNivelInicialText = cellValorNivelInicialOriginal.text();

                            // Contenedor de botones de radio dentro de la columna derecha
                            var radioGroup = $('<div>', {class: 'col-md-12 m-3 bg-light', style: 'text-align: left;'})
                                .append($('<div>', {class: 'form-check form-check-inline'})
                                    .append($('<input>', {class: 'form-check-input', type: 'radio', name: 'initial-unit' + IdAnalisisRow, id: 'pesoInicial', value: '25'}))
                                    .append($('<label>', {class: 'form-check-label', for: 'pesoInicial', text: 'Peso (kg)'})))
                                .append($('<div>', {class: 'form-check form-check-inline'})
                                    .append($('<input>', {class: 'form-check-input', type: 'radio', name: 'initial-unit' + IdAnalisisRow, id: 'psigInicial', value: '26'}))
                                    .append($('<label>', {class: 'form-check-label', for: 'psigInicial', text: 'PSIG'})));

                            // Agrupar los elementos en un contenedor de formulario
                            var formGroup = $('<div>', {class: 'form-group', id: 'pesoInicialGroup'}).append(radioGroup);

                            // Columna derecha
                            var colRight = $('<div>', {class: 'col-12'}).append(formGroup);

                            cellValorNivelInicial.html('<input type="text" id="initial-level" class="form-control" value="' + cellValorNivelInicialText + '">').append(colRight);

                            // Encontrar el elemento que tiene la clase hiddenListadoLotes_UMNIValue y obtener su valor
                            var defaultValueInicial = tr.find('.hiddenListadoLotes_UMNIValue');
                            var defaultValueInicialText = defaultValueInicial.text();

                            // Seleccionar el radio correcto basado en el valor obtenido
                            tr.find('input[name="initial-unit'+ IdAnalisisRow + '"][value="' + defaultValueInicialText + '"]').prop('checked', true);
                           

                            var cellValorNivelFinal = tr.find(".nivelfinal");
                            var cellValorNivelFinalOriginal = tr.find(".hiddenListadoLotes_NFValue");
                            var cellValorNivelFinalText = cellValorNivelFinalOriginal.text();

                            // Contenedor de botones de radio dentro de la columna derecha
                            var radioGroup2 = $('<div>', {class: 'col-md-12 m-3 bg-light', style: 'text-align: left;'})
                                .append($('<div>', {class: 'form-check form-check-inline'})
                                    .append($('<input>', {class: 'form-check-input', type: 'radio', name: 'final-unit' + IdAnalisisRow, id: 'pesoFinal', value: '25'}))
                                    .append($('<label>', {class: 'form-check-label', for: 'pesoFinal', text: 'Peso (kg)'})))
                                .append($('<div>', {class: 'form-check form-check-inline'})
                                    .append($('<input>', {class: 'form-check-input', type: 'radio', name: 'final-unit' + IdAnalisisRow, id: 'psigFinal', value: '26'}))
                                    .append($('<label>', {class: 'form-check-label', for: 'psigFinal', text: 'PSIG'})));

                            // Agrupar los elementos en un contenedor de formulario
                            var formGroup2 = $('<div>', {class: 'form-group', id: 'pesoFinalGroup'}).append(radioGroup2);

                            // Columna derecha
                            var colRight2 = $('<div>', {class: 'col-12'}).append(formGroup2);

                             // cellValorNivelInicial.html('<input type="text" class="form-control" value="' + cellValorNivelInicialText + '">').append(colRight);

                            cellValorNivelFinal.html('<input type="text" id="final-level" class="form-control" value="' + cellValorNivelFinalText + '">').append(colRight2);

                            // Encontrar el elemento que tiene la clase hiddenListadoLotes_UMNIValue y obtener su valor
                            var defaultValueFinal = tr.find('.hiddenListadoLotes_UMNFValue');
                            var defaultValueFinalText = defaultValueFinal.text();

                            // // Seleccionar el radio correcto basado en el valor obtenido
                            tr.find('input[name="final-unit' + IdAnalisisRow + '"][value="' + defaultValueFinalText + '"]').prop('checked', true);

                            tr.find('#initial-level, #final-level').on('input', validateInput);

                        });


                        $(document).off('click', '.cumplelote').on('click', '.cumplelote', function () {
                            // Obtener el botón "Cumple" clickeado
                            var button = $(this);

                            // Obtener el `tr` que contiene el botón "Cumple"
                            var parentRow = button.closest('tr');                                                    

                            // Encontrar el `textarea` dentro del mismo `tr`
                            var textareaComentarios = parentRow.find('#comentarios_estatusrevision').val();

                            // Obtener el `tr` anterior al `tr` actual
                            var previousRow = parentRow.prev('tr');

                            var idAnalisisEstatusRevision = previousRow.find('.hiddenListadoLotes_Analisis').text();
                            var idLoteEstatusRevision = previousRow.find('.noLoteDesc').text();

                           
                            // var row = table.row(previousRow);

                            // // Almacenar los datos originales de la fila utilizando el index de la fila como clave
                            // var rowIndex = row.index();
                            // originalData[rowIndex] = $.extend(true, {}, row.data());

                            var datosEstatusRevision = {
                                    IdAnalisis: idAnalisisEstatusRevision,
                                    Estatus_Revision: 9,
                                    Comentarios: textareaComentarios,
                                    UsrBitac: idUsuarioLogueado
                                };

                            // console.log(datosEstatusRevision);

                            $.ajax({
                                    type: 'POST',
                                    url: pb.base + '/LotificacionTanques/EditarLoteEstatusRevision',                                    
                                    data: datosEstatusRevision,
                                    success: function (response) {
                                        console.log(response);
                                        if (response == "1") {
                                            Swal.fire({
                                                title: "Lote Aprobado:",
                                                text: idLoteEstatusRevision,
                                                icon: "success",
                                                button: "Aceptar",
                                                allowOutsideClick: false, // Bloquear clics fuera del modal
                                                allowEscapeKey: false, // Bloquear la tecla ESC
                                                allowEnterKey: false // Bloquear la tecla Enter
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    // Restaurar los datos originales de la fila utilizando el index de la fila como clave
                                                    var row = table.row(previousRow);

                                                    // Guardar la página actual
                                                    var currentPage = table.page();

                                                    // Obtener los datos actuales de la fila
                                                    var datosActuales = row.data();

                                                    var nuevosDatos = {
                                                        estatus_RevisionVal: 9,
                                                        estatus_Revision: "CUMPLE",
                                                        estatus_RevisionNormalized: "cumple"
                                                    };

                                                    // Actualizar los campos específicos con los nuevos valores
                                                    for (var campo in nuevosDatos) {
                                                        if (nuevosDatos.hasOwnProperty(campo)) {
                                                            datosActuales[campo] = nuevosDatos[campo];
                                                        }
                                                    }

                                                    // Establecer los nuevos datos en la fila y redibujar la tabla
                                                    row.data(datosActuales).draw();

                                                    if (row.child.isShown()) {
                                                        row.child.hide();
                                                        previousRow.removeClass('shown');

                                                        var estatusrevisionCell = previousRow.find('.estatusRevisionText');
                                                        estatusrevisionCell.html("CUMPLE");

                                                        //Encuentra y Elimina el div del estatus revision del mismo `tr`
                                                        parentRow.find('#idestatusrevision').remove();
                                                    }

                                                    // Volver a la página guardada
                                                    table.page(currentPage).draw(false);

                                                     // Después de cada búsqueda, eliminar iconos de ordenamiento
                                                    $('#lotificacionTable thead th').removeClass('sorting sorting_asc sorting_desc');
                                                }
                                            });
                                        }
                                        else
                                        {
                                            Swal.fire({
                                                title: "Lote Aprobado:",
                                                text: "Algo salio mal" + response,
                                                icon: "error",
                                                button: "Aceptar",
                                                allowOutsideClick: false, // Bloquear clics fuera del modal
                                                allowEscapeKey: false, // Bloquear la tecla ESC
                                                allowEnterKey: false // Bloquear la tecla Enter
                                            }).then((result) => {
                                                if (result.isConfirmed) {

                                                    // Restaurar los datos originales de la fila utilizando el index de la fila como clave
                                                    // var rowIndex = row.index();
                                                    // if (originalData[rowIndex]) {
                                                    //     row.data(originalData[rowIndex]).draw();
                                                    //     delete originalData[rowIndex]; // Elimina los datos originales almacenados
                                                    // }

                                                    // // // Quitar la clase de difuminado de la fila
                                                    // $('td', tr).removeClass('difuminado no-difuminar');

                                                    // // Volver a la página guardada
                                                    // table.page(currentPage).draw(false);

                                                    // // Después de cada búsqueda, eliminar iconos de ordenamiento
                                                    // $('#lotificacionTable thead th').removeClass('sorting sorting_asc sorting_desc');
                                                }
                                            });
                                        }

                                    },
                                    error: function (xhr, status, error) {
                                        console.log('Error al guardar los datos: ' + error);
                                    }
                                });
                        });

                        $(document).off('click', '.nocumplelote').on('click', '.nocumplelote', function () 
                        {
                            var allValid = true;
                            
                            // Obtener el botón "No Cumple" clickeado
                            var button = $(this);

                            // Obtener el `tr` que contiene el botón "No Cumple"
                            var parentRow = button.closest('tr');                            

                            // Encontrar el `textarea` dentro del mismo `tr`
                            var textareaComentarios = parentRow.find('#comentarios_estatusrevision').val();

                            // Comprobar si el valor del textarea está vacío
                            if (!textareaComentarios) {
                                allValid = false;
                                alert('Escribe un comentario antes de rechazar, no debe estar vacío.');
                                return;
                            }

                            // Obtener el `tr` anterior al `tr` actual
                            var previousRow = parentRow.prev('tr');

                            var idAnalisisEstatusRevision = previousRow.find('.hiddenListadoLotes_Analisis').text();
                            var idLoteEstatusRevision = previousRow.find('.noLoteDesc').text();


                            // var row = table.row(previousRow);
                            // console.log("Fila: ");
                            // console.log(row.data());

                            // // Almacenar los datos originales de la fila utilizando el index de la fila como clave
                            // var rowIndex = row.index();
                            // // console.log("Indice: ");
                            // // console.log(rowIndex);
                            // originalData[rowIndex] = $.extend(true, {}, row.data());


                            var datosEstatusRevision = {
                                    IdAnalisis: idAnalisisEstatusRevision,
                                    Estatus_Revision: 10,
                                    Comentarios: textareaComentarios,
                                    UsrBitac: idUsuarioLogueado
                            };

                            // console.log(datosEstatusRevision);

                             if (allValid)
                             {
                                    $.ajax({
                                    type: 'POST',
                                    url: pb.base + '/LotificacionTanques/EditarLoteEstatusRevision',
                                    data: datosEstatusRevision,
                                    success: function (response) {
                                        console.log(response);
                                        if (response == "1") {
                                            Swal.fire({
                                                title: "Lote Rechazado:",
                                                text: idLoteEstatusRevision,
                                                icon: "success",
                                                button: "Aceptar",
                                                allowOutsideClick: false, // Bloquear clics fuera del modal
                                                allowEscapeKey: false, // Bloquear la tecla ESC
                                                allowEnterKey: false // Bloquear la tecla Enter
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    // Restaurar los datos originales de la fila utilizando el index de la fila como clave
                                                    var row = table.row(previousRow);

                                                    // Guardar la página actual
                                                    var currentPage = table.page();
                                                    
                                                    // Obtener los datos actuales de la fila
                                                    var datosActuales = row.data();        

                                                    var nuevosDatos = {
                                                        estatus_RevisionVal: 10,
                                                        estatus_Revision: "NO CUMPLE",
                                                        estatus_RevisionNormalized: "no cumple"
                                                    };

                                                    // Actualizar los campos específicos con los nuevos valores
                                                    for (var campo in nuevosDatos) {
                                                        if (nuevosDatos.hasOwnProperty(campo)) {
                                                            datosActuales[campo] = nuevosDatos[campo];
                                                        }
                                                    }                                                    

                                                    // Establecer los nuevos datos en la fila y redibujar la tabla
                                                    row.data(datosActuales).draw();                                                 

                                                    if (row.child.isShown()) {
                                                        row.child.hide();
                                                        previousRow.removeClass('shown');

                                                        var estatusrevisionCell = previousRow.find('.estatusRevisionText');
                                                        estatusrevisionCell.html("NO CUMPLE");

                                                        //Encuentra y Elimina el div del estatus revision del mismo `tr`
                                                        parentRow.find('#idestatusrevision').remove();
                                                    }

                                                    // Volver a la página guardada
                                                    table.page(currentPage).draw(false);

                                                    // Después de cada búsqueda, eliminar iconos de ordenamiento
                                                    $('#lotificacionTable thead th').removeClass('sorting sorting_asc sorting_desc');
                                                }
                                            });
                                        }
                                        else
                                        {
                                            Swal.fire({
                                                title: "Lote Rechazado:",
                                                text: "Algo salio mal" + response,
                                                icon: "error",
                                                button: "Aceptar",
                                                allowOutsideClick: false, // Bloquear clics fuera del modal
                                                allowEscapeKey: false, // Bloquear la tecla ESC
                                                allowEnterKey: false // Bloquear la tecla Enter
                                            }).then((result) => {
                                                if (result.isConfirmed) {

                                                    // Restaurar los datos originales de la fila utilizando el index de la fila como clave
                                                    // var rowIndex = row.index();
                                                    // if (originalData[rowIndex]) {
                                                    //     row.data(originalData[rowIndex]).draw();
                                                    //     delete originalData[rowIndex]; // Elimina los datos originales almacenados
                                                    // }

                                                    // // // Quitar la clase de difuminado de la fila
                                                    // $('td', tr).removeClass('difuminado no-difuminar');

                                                    // // Volver a la página guardada
                                                    // table.page(currentPage).draw(false);

                                                    // // Después de cada búsqueda, eliminar iconos de ordenamiento
                                                    // $('#lotificacionTable thead th').removeClass('sorting sorting_asc sorting_desc');
                                                }
                                            });
                                        }

                                    },
                                    error: function (xhr, status, error) {
                                        console.log('Error al guardar los datos: ' + error);
                                    }
                                });
                             }

                         
                        });





                        $(document).off('click', '.cancelarLoteEditado').on('click', '.cancelarLoteEditado', function () {
                            var tr = $(this).closest('tr');
                            var row = table.row(tr);

                            if (row.child.isShown()) {
                                row.child.hide();
                                tr.removeClass('shown');

                                var rowData = row.data();
                                var actionsCell = tr.find('td:last');

                                if(rowData.permisoUser)
                                {
                                    actionsCell.html('<button class="btn btn-primary editarlote">Editar Lote</button>');

                                    var cellValueNivelInicial = tr.find(".nivelinicial");
                                    var ValueNivelInicial = tr.find(".hiddenListadoLotes_NIValue").text();                                    
                                    var ValueNivelInicialUM = tr.find(".hiddenListadoLotes_UMNIValue").text();
                                    cellValueNivelInicial.html(ValueNivelInicial + (ValueNivelInicialUM == "25" ? " kg" : " psig"));

                                    var cellValueNivelFinal = tr.find(".nivelfinal");
                                    var ValueNivelFinal = tr.find(".hiddenListadoLotes_NFValue").text();
                                    var ValueNivelFinalUM = tr.find(".hiddenListadoLotes_UMNFValue").text();
                                    cellValueNivelFinal.html(ValueNivelFinal + (ValueNivelFinalUM == "25" ? " kg" : " psig"));

                                }
                            }
                        });

                        $(document).off('click', '.guardarLoteEditado').on('click', '.guardarLoteEditado', function () {
                            var currentRow = $(this).closest('tr');
                            var IdAnalisisRow = currentRow.find('.hiddenListadoLotes_Analisis').text().trim();
                            var IdLoteRow = currentRow.find('.noLoteDesc').text().trim();
                            var EstatusRevisionRow = currentRow.find('.estatusRevisionText').text().trim();
                            console.log(IdAnalisisRow);

                            var allValid = true;
                            var invalidRows = []; // Array para almacenar las descripciones de filas inválidas
                            var tableData = []; // Array para almacenar los datos de la tabla
                            var BanderaProductoConforme = true;

                            //Validaciones de los inputs de valor inicial y final
                            var nivelInicialTd = currentRow.find('td.nivelinicial');
                            var valnivelInicial = nivelInicialTd.find('input').val();
                            console.log("Valor inicial");
                            console.log(valnivelInicial);

                            var nivelFinalTd = currentRow.find('td.nivelfinal');
                            var valnivelFinal = nivelFinalTd.find('input').val();
                            console.log("Valor final");
                            console.log(valnivelFinal);

                            if (valnivelInicial === '' || parseFloat(valnivelInicial) < 0)
                            {
                                allValid = false;
                                nivelInicialTd.addClass('invalid');
                                // Resaltar input inválido (opcional)
                                alert('El nivel inicial debe ser mayor a 0 y no estar vacío.');
                                return;
                                // Salir de la función si el valor es inválido
                            }
                            else {
                                nivelInicialTd.removeClass('invalid');
                                // Remover resaltado si es válido (opcional)
                            }

                            if (valnivelFinal === '' || parseFloat(valnivelFinal) <= 0)
                            {
                                allValid = false;
                                nivelFinalTd.addClass('invalid');
                                // Resaltar input inválido (opcional)
                                alert('El nivel final debe ser mayor a 0 y no estar vacío.');
                                return;
                                // Salir de la función si el valor es inválido
                            }
                            else {
                                nivelFinalTd.removeClass('invalid');
                                // Remover resaltado si es válido (opcional)
                            }

                            valnivelInicial = parseFloat(valnivelInicial);
                            valnivelFinal = parseFloat(valnivelFinal);

                            // console.log("Valor Inicial:", valnivelInicial); // Para depuración
                            // console.log("Valor Final:", valnivelFinal); // Para depuración

                            if (valnivelInicial > valnivelFinal)
                            {
                                allValid = false;
                                nivelFinalTd.addClass('invalid');
                                // Resaltar input inválido (opcional)
                                alert('El nivel inicial no debe ser mayor a nivel final.');
                                return;
                            }

                            


                            if (valnivelInicial === valnivelFinal)
                            {
                                allValid = false;
                                nivelFinalTd.addClass('invalid');
                                // Resaltar input inválido (opcional)
                                alert('El nivel inicial no debe ser igual a nivel final.');
                                return;
                            }


                            //Validacion de los inputs dentro de la tabla detalle
                            currentRow.next('tr').find('table').find('tr:not(:first-child)').each(function () {
                                var registro = $(this);
                                var rowValid = true;

                                // Obtener el valor de la celda con la clase .descParametroRow
                                var descripcionParametro = registro.find('td.descParametroRow').text().trim();

                                var inputField = registro.find('input');

                                if (inputField.length > 0)
                                {
                                    alert('No se han guardado los datos en el parametro: ' + descripcionParametro);
                                    rowValid = false;
                                }
                                else
                                {
                                    var cell = registro.find('.idValorAnalisis');
                                    var descripcioAnalizador = "";
                                    var descripcioValorAnalisis = "";

                                    var cellText = cell.text().trim();

                                    if (cellText === '' || cellText === '0.0000' || !/^\d+(\.\d{1,4})?$/.test(cellText)) {
                                        rowValid = false;
                                        if (cellText === '' || cellText === '0.0000') {
                                            descripcioValorAnalisis = "No se tiene valor de Analisis para el parametro " + descripcionParametro;
                                        }

                                        cell.addClass('invalid');
                                        // Agrega una clase para resaltar la celda inválida (opcional)
                                    }
                                    else {
                                        cell.removeClass('invalid');
                                        // Remueve la clase si es válida (opcional)
                                    }

                                   

                                    var cellAnalizador = registro.find('.idAnalizadorValue');
                                    var cellDropdownText = cellAnalizador.text().trim();

                                    if (cellDropdownText === '') {
                                        rowValid = false;
                                        descripcioAnalizador = "No se tiene seleccionado un Analizador para el parametro " + descripcionParametro;
                                        cellAnalizador.addClass('invalid');
                                        // Agrega una clase para resaltar la celda inválida (opcional)
                                    }
                                    else {
                                        cellAnalizador.removeClass('invalid');
                                        // Remueve la clase si es válida (opcional)
                                    }

                                    // Si la fila no es válida, marca allValid como false e inserta la descripción
                                    if (!rowValid) {
                                        allValid = false;
                                        invalidRows.push(descripcioValorAnalisis + ' - ' + descripcioAnalizador);
                                        // Añadir descripción de filas inválidas al array
                                    }
                                    else
                                    {
                                         //Bandera para validar si es un producto conforme para la Edicicion
                                        var cvalorLimiteInf = registro.find('.valorLimiteInf').text().trim();
                                        cvalorLimiteInf = parseFloat(cvalorLimiteInf);
                                        var cvalorLimiteSup = registro.find('.valorLimiteSup').text().trim();
                                        cvalorLimiteSup = parseFloat(cvalorLimiteSup);

                                        console.log("Valor Analisis");
                                        console.log(cellText);
                                        console.log("Valor Limite Inf");
                                        console.log(cvalorLimiteInf);
                                        console.log("Valor Limite Sup");
                                        console.log(cvalorLimiteSup);

                            

                                        if (isNaN(cellText) || parseFloat(cellText) < cvalorLimiteInf || cellText > cvalorLimiteSup)
                                        {
                                            BanderaProductoConforme = false;
                                        }

                                        var rowData =
                                        {
                                            IdAnalisis: registro.find('.idAnalisisDetalle').text().trim(),
                                            IdParametro: registro.find('.idParametroDetalle').text().trim(),
                                            // ValorLimiteInf: currentRow.find('.valorLimiteInf').text().trim(),
                                            // ValorLimiteSup: currentRow.find('.valorLimiteSup').text().trim(),
                                            ValorAnalisis: registro.find('.idValorAnalisis').text().trim(),
                                            //IdUnidadMedida: currentRow.find('.idUnidadMedida').text().trim(),
                                            IdAnalizador: registro.find('.idAnalizadorValue').text().trim(),
                                            descAnalizador: registro.find('.idAnalizador').text().trim(),

                                            IdMetodo: registro.find('.idMetodo').text().trim(),
                                            descIdMetodo: registro.find('.descdMetodoOriginal').text().trim(),

                                            UsrAlta: idUsuarioLogueado
                                        };

                                        tableData.push(rowData); // Agregar datos válidos de la fila al array
                                    }
                                }

                            });

                            if (allValid)
                            {
                                
                                var idUMInicial = currentRow.find('input[name="initial-unit' + IdAnalisisRow + '"]:checked').val();
                                var idUMFinal = currentRow.find('input[name="final-unit' + IdAnalisisRow + '"]:checked').val();

                                // Datos de la tabla maestra
                                var masterData =
                                {
                                    IdAnalisis: IdAnalisisRow,
                                    IdLote: IdLoteRow,
                                    IdPlanta: idPlantaSeleccionado,
                                    IdProducto: idProductoValueSeleccionado,
                                    NivelIni: valnivelInicial,
                                    IdUMedidaIni: idUMInicial,
                                    NivelFin: valnivelFinal,
                                    IdUMedidaFin: idUMFinal,
                                    //Comentarios: $('#commentarios').val(),
                                    // LoteOrigen: $('#LoteOrigen').val(),
                                    UsrAlta: idUsuarioLogueado,
                                    Estatus_Analisis: BanderaProductoConforme == false ? 7 : 6,
                                    Estatus_Revision: (EstatusRevisionRow == "CUMPLE")  ||(EstatusRevisionRow == "NO CUMPLE")  || (EstatusRevisionRow == "PENDIENTE") ? 3 : 8
                                };

                                console.log("Maestro:")
                                console.log(masterData);

                                console.log("Detalle:")
                                console.log(tableData);


                                // Todas las celdas son válidas, enviar datos al controlador
                                $.ajax({
                                    type: 'POST',
                                    url: pb.base + '/LotificacionTanques/EditarLote',
                                    //contentType: 'application/json',
                                    data: ({
                                        masterData: masterData,
                                        detailData: tableData
                                    }),
                                    success: function (response) {
                                        // console.log(response);
                                        Swal.fire({
                                            title: "Lote Actualizado:",
                                            text: response,
                                            icon: "success",
                                            button: "Aceptar",
                                            allowOutsideClick: false, // Bloquear clics fuera del modal
                                            allowEscapeKey: false, // Bloquear la tecla ESC
                                            allowEnterKey: false // Bloquear la tecla Enter
                                        }).then((result) => {
                                            if (result.isConfirmed) {


                                                // Restaurar los datos originales de la fila utilizando el index de la fila como clave
                                                    var row = table.row(currentRow);

                                                    // Guardar la página actual
                                                    var currentPage = table.page();
                                                    
                                                    // Obtener los datos actuales de la fila
                                                    var datosActuales = row.data();

                                                    var nuevosDatos = {
                                                        estatus_RevisionVal: 3,
                                                        estatus_Revision: "PENDIENTE",
                                                        estatus_RevisionNormalized: "pendiente",

                                                        nivelIni: valnivelInicial + (idUMInicial == "25" ? " kg" : " psig"),
                                                        nivelIniNormalized: valnivelInicial + (idUMInicial == "25" ? " kg" : " psig"),
                                                        nivelIniVal: valnivelInicial,
                                                        umInicial: idUMInicial,

                                                        nivelFin: valnivelFinal + (idUMFinal == "25" ? " kg" : " psig"),
                                                        nivelFinNormalized: valnivelFinal + (idUMFinal == "25" ? " kg" : " psig"),
                                                        nivelFinVal: valnivelFinal,
                                                        umFinal: idUMFinal
                                                    };

                                                    // Actualizar los campos específicos con los nuevos valores
                                                    for (var campo in nuevosDatos) {
                                                        if (nuevosDatos.hasOwnProperty(campo)) {
                                                            datosActuales[campo] = nuevosDatos[campo];
                                                        }
                                                    }

                                                    // Nuevos valores para el detalle 'valorAnalisis'
                                                    var datosActualesDetalle = datosActuales.detalles; // Obtener los datos actuales de 'detalle' de la fila                                                    
                                                    
                                                    // Acceder y actualizar el campo 'ValorAnalisis' en 'detalle' basado en 'IdAnalisis'
                                                    for (var i = 0; i < tableData.length; i++) {
                                                        var idAnalisisBuscado = tableData[i].IdAnalisis.toString();                                                        
                                                        var nuevoValorAnalisis = tableData[i].ValorAnalisis.toString();                                                        
                                                        var idParametroBuscado = tableData[i].IdParametro.toString();
                                                        var idAnalizadorBuscado = tableData[i].IdAnalizador.toString();
                                                        var idAnalizadorTextBuscado = tableData[i].descAnalizador.toString();
                                                        var idMetodoBuscado = tableData[i].IdMetodo.toString();
                                                        var idMetodoTextBuscado = tableData[i].descIdMetodo.toString();
                                                        
                                                        for (var j = 0; j < datosActualesDetalle.length; j++) {
                                                            if (datosActualesDetalle[j].idAnalisisDetail.toString() === idAnalisisBuscado
                                                                && datosActualesDetalle[j].idParametro.toString() === idParametroBuscado)
                                                                {
                                                                    datosActualesDetalle[j].valorAnalisis = nuevoValorAnalisis;
                                                                    datosActualesDetalle[j].valorAnalisisNormalized = nuevoValorAnalisis;

                                                                    datosActualesDetalle[j].idAnalizadorVal = idAnalizadorBuscado;
                                                                    datosActualesDetalle[j].idAnalizador = idAnalizadorTextBuscado;
                                                                    datosActualesDetalle[j].idAnalizadorNormalized = idAnalizadorTextBuscado;

                                                                    datosActualesDetalle[j].idMetodoVal = idMetodoBuscado;
                                                                    datosActualesDetalle[j].idMetodo = idMetodoTextBuscado;
                                                                    datosActualesDetalle[j].idMetodoNormalized = idMetodoTextBuscado;

                                                                    break; // Salir del bucle una vez que se ha encontrado y actualizado
                                                                }
                                                        }
                                                    }
                                                    
                                                    // Reasignar los detalles actualizados a datosActuales
                                                    datosActuales.detalles = datosActualesDetalle;
                                                    
                                                    // Establecer los nuevos datos en la fila y redibujar la tabla
                                                    row.data(datosActuales).draw();

                                                    if (row.child.isShown()) {
                                                        row.child.hide();
                                                        currentRow.removeClass('shown');

                                                        var estatusrevisionCell = currentRow.find('.estatusRevisionText');
                                                        estatusrevisionCell.html("PENDIENTE");

                                                        var rowData = row.data();
                                                        var actionsCell = currentRow.find('td:last');

                                                        if (rowData.permisoUser) 
                                                        {
                                                            actionsCell.html('<button class="btn btn-primary editarlote">Editar Lote</button>');

                                                            var cellValueNivelInicial = currentRow.find(".nivelinicial");
                                                            cellValueNivelInicial.html(valnivelInicial + (idUMInicial == "25" ? " kg" : " psig"));

                                                            var cellValueNivelFinal = currentRow.find(".nivelfinal");
                                                            cellValueNivelFinal.html(valnivelFinal + (idUMFinal == "25" ? " kg" : " psig"));
                                                        }
                                                    }

                                                    // Volver a la página guardada
                                                    table.page(currentPage).draw(false);

                                                    // Después de cada búsqueda, eliminar iconos de ordenamiento
                                                    $('#lotificacionTable thead th').removeClass('sorting sorting_asc sorting_desc');


                                                // Este código se ejecuta después de que el usuario haga clic en "Aceptar"
                                               
                                                // var row = table.row(currentRow);

                                                // if (row.child.isShown()) {
                                                //     row.child.hide();
                                                //     currentRow.removeClass('shown');

                                                //     var rowData = row.data();
                                                //     var actionsCell = currentRow.find('td:last');

                                                //     if (rowData.permisoUser) {
                                                //         actionsCell.html('<button class="btn btn-primary editarlote">Editar Lote</button>');

                                                //         var cellValueNivelInicial = currentRow.find(".nivelinicial");                                                                                                                
                                                //         cellValueNivelInicial.html(valnivelInicial + (idUMInicial == "25" ? " kg" : " psig"));

                                                //         var cellValueNivelFinal = currentRow.find(".nivelfinal");
                                                //         cellValueNivelFinal.html(valnivelFinal + (idUMFinal == "25" ? " kg" : " psig"));
                                                //     }
                                                // }

                                                // location.reload();
                                            }
                                        });
                                    },
                                    error: function (xhr, status, error) {
                                        console.log('Error al guardar los datos: ' + error);
                                    }
                                });
                            }





                        });




                        //Edicion de parametros en la tabla de detalles
                        $(document).off('click', '.editarparametro').on('click', '.editarparametro', function () {
                            var currentRow = $(this).closest('tr');
                            var cellValorAnalisis = currentRow.find('.idValorAnalisis');

                            cellValorAnalisis.each(function () {
                                var cell = $(this);
                                var cellText = cell.text();
                                cell.html('<input type="text" class="form-control" value="' + cellText + '">');
                            });

                            // Agregar evento keypress a los inputs dentro de las celdas Valor analisis
                            currentRow.find('.idValorAnalisis input').on('keypress', function (event) {
                                var charCode = (event.which) ? event.which : event.keyCode;
                                if (charCode !== 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
                                    return false;
                                }
                                // Permitir solo un punto decimal
                                if (charCode === 46 && $(this).val().indexOf('.') !== -1) {
                                    return false;
                                }
                                // // Permitir hasta 4 dígitos después del punto decimal
                                // var inputValue = $(this).val();
                                // if (inputValue.includes('.') && inputValue.split('.')[1].length >= 4)
                                // {
                                //     return false;
                                // }
                                return true;
                            });

                            var cellidPlantaDetalle = currentRow.find('.idPlantaDetalle').text();
                            var cellidParametroDetalle = currentRow.find('.idParametroDetalle').text();

                            // console.log(cellidPlantaDetalle);
                            // console.log(cellidParametroDetalle);

                            var cellValorAnalizador = currentRow.find('.idAnalizador');
                            var currentValAnalizadorText = cellValorAnalizador.text();

                            var idMetodoCell = currentRow.find('.idMetodo');
                            var descMetodoCell = currentRow.find('.descdMetodoOriginal');

                            //console.log(cellValorAnalizador.text());
                            // console.log(currentValAnalizadorText);

                            // Obtener el valor del elemento con la clase .IdAnalizadorOriginal (id del analizaador que se tiene en la base de datos)
                            var valOrigAnalizadorId = currentRow.find('.idAnalizadorValue').text();

                            $.ajax({
                                type: 'GET',
                                url: pb.base + "/LotificacionTanques/ObtenerAnalizadores",
                                data: ({
                                    idPlanta: cellidPlantaDetalle,
                                    idParametro: cellidParametroDetalle
                                }),
                                success: function (response) {
                                    // Crear el elemento select
                                    var select = $('<select class="form-control"></select>');
                                    // Iterar sobre la respuesta y agregar opciones al select
                                    console.log(response);
                                    response.forEach(function (analizador, index) {
                                        var option = $('<option></option>')
                                            .val(analizador.idAnalizador)
                                            .text(analizador.descAnalizador)
                                            .data('idMetodo', analizador.idMetodo)
                                            .data('descMetodo', analizador.descMetodo);

                                        // Seleccionar por defecto el registro que coincide con el valorOriginal
                                        if (analizador.idAnalizador == valOrigAnalizadorId) {
                                            option.attr('selected', 'selected');
                                        }

                                        select.append(option);
                                    });
                                    // Agregar el select al dropdownCell
                                    cellValorAnalizador.html(select);

                                    function actualizarIdMetodo() {
                                        // var editableCells = currentRow.find('.editable');

                                        var selectedOption = currentRow.find('.idAnalizador select option:selected');
                                        var idMetodo = selectedOption.data('idMetodo');
                                        var descMetodo = selectedOption.data('descMetodo');

                                        idMetodoCell.text(idMetodo);
                                        descMetodoCell.text(descMetodo);
                                    }

                                    // Ejecutar al cargar la página para el primer elemento
                                    actualizarIdMetodo();

                                    // Evento para actualizar el idMetodo al cambiar la selección
                                    currentRow.find('.idAnalizador select').on('change', actualizarIdMetodo);

                                },
                                error: function (xhr, status, error) {
                                    console.log('Error al obtener los analizadores: ' + error);
                                }
                            });



                            var actionsCell = currentRow.find('td:last');

                            actionsCell.html('<button class="btn btn-success saveParametro-btn">Guardar</button> ' +
                                '<button class="btn btn-danger cancelParametro-btn">Cancelar</button>');


                            //console.log(cellAnalizador);
                        });

                        //Regresa los parametros en la tabla de detalles a valores orignal
                        $(document).off('click', '.cancelParametro-btn').on('click', '.cancelParametro-btn', function () {
                            var row = $(this).closest('tr');

                            row.find('.idValorAnalisis').each(function () {
                                var cell = $(this);
                                var cellInput = cell.find('input');
                                var originalValue = cellInput.attr('value');
                                // Restaurar el valor de la celda
                                cell.html(originalValue);
                            });

                            var celldescAnalizador = row.find('.idAnalizadorValueDesc');
                            var celldIdAnalizador = row.find('.idAnalizador');
                            celldIdAnalizador.html(celldescAnalizador.text());

                            var cellMetodoAnalitico = row.find('.idMetodo');
                            var cellMetodoanaliticoOriginal = row.find('.idMetodoOriginal');
                            var cellMetodoanaliticoOriginaldesc = row.find('.descdMetodoOriginaldesc');
                            var cellMetodoanaliticoOriginalReturn = row.find('.descdMetodoOriginal');

                            cellMetodoanaliticoOriginalReturn.html(cellMetodoanaliticoOriginaldesc.text());
                            cellMetodoAnalitico.html(cellMetodoanaliticoOriginaldesc.text());

                            row.find('td:last').html('<button class="editarparametro">✏️</button>');
                        });


                        $(document).off('click', '.saveParametro-btn').on('click', '.saveParametro-btn', function () {
                            var currentRow = $(this).closest('tr');
                            var valid = true;

                            // Procesa la celda de Valor Analisis del input de la linea modificada
                            currentRow.find('.idValorAnalisis').each(function () {
                                var cell = $(this);
                                var input = cell.find('input');
                                if (input.length) {
                                    // Obtener el valor del input
                                    var inputValue = input.val();

                                    // Validar si es un número válido
                                    if (!/^\d+(\.\d{1,4})?$/.test(inputValue)) {
                                        alert('Valor no válido: ' + inputValue);
                                        valid = false;
                                        return false;
                                    }
                                    // Reemplazar el input por el valor en la celda
                                    cell.html(inputValue);
                                }
                            });

                            if (!valid)
                                return false;

                            var valorAnalisis = parseFloat(currentRow.find('.idValorAnalisis').text());
                            var valorLimiteInf = parseFloat(currentRow.find('.valorLimiteInf').text());
                            var valorLimiteSup = parseFloat(currentRow.find('.valorLimiteSup').text());

                            if (isNaN(valorAnalisis) || valorAnalisis < valorLimiteInf || valorAnalisis > valorLimiteSup) {
                                alert(`El valor ${valorAnalisis} está fuera del rango permitido (${valorLimiteInf} - ${valorLimiteSup}) en el parámetro ${currentRow.find('.descParametroRow').text()}.`);
                                //currentRow.find('.editable').html('<input type="text" class="form-control" value="' + valorAnalisis + '">').find('input').focus();
                                //BanderaProductoConforme = false;
                                // return false;
                            }

                            // Procesar celda del dropdown
                            var dropdownCell = currentRow.find('.idAnalizador');
                            var select = dropdownCell.find('select');
                            if (select.length) {
                                // Obtener el valor seleccionado
                                var selectedValue = select.find('option:selected').val();
                                var selectedText = select.find('option:selected').text();

                                // Reemplazar el select por el texto seleccionado
                                dropdownCell.html(selectedText);

                                // Guardar el valor en una celda oculta
                                currentRow.find('.idAnalizadorValue').html(selectedValue);
                                currentRow.find('.idAnalizadorValueDesc').html(selectedText);

                                 // Guardar el valor en una celda oculta
                                currentRow.find('.idMetodoOriginal').html(currentRow.find('.idMetodo').text());
                                currentRow.find('.descdMetodoOriginaldesc').html(currentRow.find('.descdMetodoOriginal').text());

                            }

                            // Restaurar los botones
                            var actionsCell = currentRow.find('td:last');
                            actionsCell.html('<button class="editarparametro">✏️</button>');

                        });




                        // Manejar el evento de clic en el botón "Cancelar"
                        // Asociar el nuevo evento
                        $(document).off('click', '#lotificacionTable tbody .canclote').on('click', '#lotificacionTable tbody .canclote', function () {
                            var tr = $(this).closest('tr');
                            var row = table.row(tr);

                            // Almacenar los datos originales de la fila utilizando el index de la fila como clave
                            var rowIndex = row.index();
                            originalData[rowIndex] = $.extend(true, {}, row.data());

                            // console.log(row.data());
                            // Mostrar el campo de comentarios
                            var comentarios = row.data().comentarios || '';
                            if (comentarios) {
                                $('td', tr).eq(11).html(comentarios + '<br>Argumente el motivo de la cancelanción:<br><input type="text" value=""  class="input-comentarios" id="input-comentarios-' + rowIndex + '" disabled>');
                            }
                            else {
                                $('td', tr).eq(11).html('Argumente el motivo de la cancelanción: <br><input type="text" value="" class="input-comentarios" id="input-comentarios-' + rowIndex + '" disabled>');
                            }

                            // // Mostrar el checkbox de "Cancelar Lote" en la columna "Estatus"
                            var estatus = row.data().estatus || '';

                            if (estatus) {
                                $('td', tr).eq(13).html(estatus + '<br><input type="checkbox" id="check-cancelar-lote" > ¿Cancelar Lote?');
                            }
                            else {
                                $('td', tr).eq(13).html('<input type="checkbox" id="check-cancelar-lote"> ¿Cancelar Lote?');
                            }

                            // Cambiar el botón "Cancelar Lote" a "Guardar" y "Cancelar"
                            $('td', tr).eq(18).html('<button class="btn btn-success save-btnRow">Guardar</button> <button class="btn btn-danger cancel-btnRow">Cancelar</button>');


                            // Aplicar la clase de difuminado a las celdas excepto las columnas especificadas
                            $('td', tr).each(function (index) {
                                if (index !== 11 && index !== 13 && index !== 18) {
                                    $(this).addClass('difuminado');
                                }
                                else if (index === 11) {
                                    // Asegurarse de que el checkbox no se vea afectado
                                    $(this).find('input[type="checkbox"]').addClass('no-difuminar');
                                }
                            });
                        });

                        $(document).off('click', '#check-cancelar-lote').on('click', '#check-cancelar-lote', function ()
                        {
                            var tr = $(this).closest('tr');
                            var inputComentario = $('td', tr).eq(11).find('input');
                            if (this.checked)
                            {
                                inputComentario.prop('disabled', false); // Habilitar el input
                            }
                            else
                            {
                                inputComentario.prop('disabled', true).val(''); // Deshabilitar y limpiar el input
                            }
                        });

                        $(document).off('click', '.cancel-btnRow').on('click', '.cancel-btnRow', function ()
                        {
                            var tr = $(this).closest('tr');
                            var row = table.row(tr);

                            // Guardar la página actual
                            var currentPage = table.page();

                            // Restaurar los datos originales de la fila utilizando el index de la fila como clave
                            var rowIndex = row.index();
                            if (originalData[rowIndex])
                            {
                                row.data(originalData[rowIndex]).draw();
                                delete originalData[rowIndex]; // Elimina los datos originales almacenados
                            }

                            // // Quitar la clase de difuminado de la fila
                            $('td', tr).removeClass('difuminado no-difuminar' );

                            // Volver a la página guardada
                            table.page(currentPage).draw(false);

                            // Después de cada búsqueda, eliminar iconos de ordenamiento
                            $('#lotificacionTable thead th').removeClass('sorting sorting_asc sorting_desc');
                        });

                        // Manejar el evento de clic en el botón "Guardar"
                        // Asociar el nuevo evento
                        $(document).off('click', '#lotificacionTable tbody .save-btnRow').on('click', '#lotificacionTable tbody .save-btnRow', function () {
                            var tr = $(this).closest('tr');
                            var row = table.row(tr);

                            // Guardar la página actual
                            var currentPage = table.page();

                            // Validar si el checkbox está activado y el input no está vacío
                            var checkbox = tr.find('#check-cancelar-lote');
                            var inputComentario = tr.find('.input-comentarios');
                            var allValid = checkbox.is(':checked') && inputComentario.val().trim() !== '';

                            var idAnalisisCancel = tr.find('.hiddenListadoLotes_Analisis').text();
                            var idUserCancel = tr.find('.hiddenListadoLotes_user').text();

                            // Obtener el texto de la celda "No. Lote" (índice 0)
                            var noLote = tr.find('td:eq(2)').text();

                            var textUserCancelado = row.data().usrAlta || '';

                            var estatusOriginal = row.data().estatus || '';

                            // Obtener la fecha actual
                            var fechaActual = new Date();

                            // Formatear la fecha en un formato legible
                            var dia = fechaActual.getDate();
                            var mes = fechaActual.getMonth() + 1; // Los meses comienzan desde 0
                            var anio = fechaActual.getFullYear();
                            var fechaFormateada = dia + '/' + mes + '/' + anio;

                            if (allValid)
                            {
                                var datosCancelacion = {
                                    IdAnalisis: idAnalisisCancel,
                                    MotivoCancelacion: inputComentario.val(),
                                    UserCancel: idUserCancel
                                };

                                // Todas las celdas son válidas, enviar datos al controlador
                                $.ajax({
                                    type: 'POST',
                                    url: pb.base + '/LotificacionTanques/CancelarLote',
                                    //contentType: 'application/json',
                                    data: datosCancelacion,
                                    success: function (response) {
                                        console.log(response);
                                        if (response == "1") {
                                            Swal.fire({
                                                title: "Lote Cancelado:",
                                                text: noLote,
                                                icon: "success",
                                                button: "Aceptar",
                                                allowOutsideClick: false, // Bloquear clics fuera del modal
                                                allowEscapeKey: false, // Bloquear la tecla ESC
                                                allowEnterKey: false // Bloquear la tecla Enter
                                            }).then((result) => {
                                                if (result.isConfirmed) {

                                                    // Encuentra el siguiente tr
                                                    var nextTr = tr.next('tr');
                                                    // console.log(nextTr);

                                                    if (nextTr.length > 0)
                                                    {
                                                        // Encuentra el div dentro de la siguiente fila
                                                        var targetMensajeDiv = nextTr.find('#targetMensaje');

                                                        if (targetMensajeDiv.length > 0)
                                                        {
                                                            targetMensajeDiv.html('ESTE LOTE FUE CANCELADO POR <strong>' + textUserCancelado + '</strong>. El dia ' + fechaFormateada + '<br>' + 'JUSTIFICACION: <strong>' + inputComentario.val() + "</strong>").css('color', 'red');

                                                        }
                                                    }

                                                    // Restaurar los datos originales de la fila utilizando el index de la fila como clave
                                                    var rowIndex = row.index();
                                                    if (originalData[rowIndex]) {
                                                        row.data(originalData[rowIndex]).draw();
                                                        delete originalData[rowIndex]; // Elimina los datos originales almacenados
                                                    }

                                                    // // Quitar la clase de difuminado de la fila
                                                    $('td', tr).removeClass('difuminado no-difuminar' );

                                                    // Deja la ultima columna vacia sin botones
                                                    $('td', tr).eq(18).html('');

                                                    // Coloca  a la columna de Estatus "CANCELADO"
                                                    $('td', tr).eq(13).html('<span style="color: red; font-weight: bold;">CANCELADO</span>');

                                                    // Cambiar el botón "Reactivar"
                                                    // $('td', tr).eq(17).html('<button class="btn btn-success reactivar-btnRow" disabled>Reactivar</button>');

                                                    //Guarda el mensaje en el indice de idAnalisis
                                                    mensajes[idAnalisisCancel] = "<span style='color:red;'>" + 'ESTE LOTE FUE CANCELADO POR <strong>' + textUserCancelado + '</strong>. El dia ' + fechaFormateada + '<br>' + 'JUSTIFICACION: <strong>' + inputComentario.val() + "</strong> </span>";

                                                    

                                                    // Volver a la página guardada
                                                    table.page(currentPage).draw(false);

                                                     // Después de cada búsqueda, eliminar iconos de ordenamiento
                                                    $('#lotificacionTable thead th').removeClass('sorting sorting_asc sorting_desc');
                                                }
                                            });
                                        }
                                        else
                                        {
                                            Swal.fire({
                                                title: "Lote Cancelado:",
                                                text: "Algo salio mal" + response,
                                                icon: "error",
                                                button: "Aceptar",
                                                allowOutsideClick: false, // Bloquear clics fuera del modal
                                                allowEscapeKey: false, // Bloquear la tecla ESC
                                                allowEnterKey: false // Bloquear la tecla Enter
                                            }).then((result) => {
                                                if (result.isConfirmed) {

                                                    // Restaurar los datos originales de la fila utilizando el index de la fila como clave
                                                    var rowIndex = row.index();
                                                    if (originalData[rowIndex]) {
                                                        row.data(originalData[rowIndex]).draw();
                                                        delete originalData[rowIndex]; // Elimina los datos originales almacenados
                                                    }

                                                    // // Quitar la clase de difuminado de la fila
                                                    $('td', tr).removeClass('difuminado no-difuminar');

                                                    // Volver a la página guardada
                                                    table.page(currentPage).draw(false);

                                                    // Después de cada búsqueda, eliminar iconos de ordenamiento
                                                    $('#lotificacionTable thead th').removeClass('sorting sorting_asc sorting_desc');
                                                }
                                            });
                                        }

                                    },
                                    error: function (xhr, status, error) {
                                        console.log('Error al guardar los datos: ' + error);
                                    }
                                });

                               // alert('Validación exitosa. ¡Datos guardados!');
                            }
                            else
                            {
                                alert('Por favor, activa el checkbox y coloca un argumento para cancelar.');
                            }
                        });

                        $('#ExporttoExcel').click(function () {
                            var dataExport = [];

                            // Nombres de las columnas
                            var columnNames = [
                                "Id Análisis", "Id Lote", "Lote Origen", "Id Tanque", "Nivel Inicial", "Nivel Final", "Comentarios", "Fecha Alta", "Estatus", "Estatus Revisión", "Usuario Alta", "Usuario Alta (Oculto)",
                                "Acciones", "Parámetro", "Límite Inferior", "Límite Superior", "Valor Análisis", "Unidad de Medida", "Analizador", "Método Analítico"
                            ];

                            // Agregar los nombres de las columnas como la primera fila del CSV
                            dataExport.push(columnNames);

                            table.rows().every(function (rowIdx, tableLoop, rowLoop) {
                                var data = this.data();
                                var detalles = data.detalles || [];

                                // dataExport.push([
                                //     data.idAnalisis, data.idLote, data.loteOrigen, data.idTanque, data.nivelIni, data.nivelFin, data.comentarios, data.fechaAlta, data.estatus, 'N/A', // Estatus Revisión
                                //     data.usrAlta, data.getUseralta, data.permisoUser ? (data.estatus == 'CANCELADO' ? 'Reactivar' : 'Editar') : ''
                                // ]);

                                // // Incluir detalles en el CSV
                                // detalles.forEach(function(detalle)
                                // {
                                //     dataExport.push([ '', '', '', '', '', '', '', '', '', '', '', '', '', // Campos vacíos para las columnas principales
                                //     detalle.idParametro, detalle.valorLimiteInf, detalle.valorLimiteSup, detalle.valorAnalisis, detalle.descUnidadMedida, detalle.idAnalizador, detalle.idMetodo ]);
                                // });

                                // Si no hay detalles, simplemente agregamos la fila padre
                                if (detalles.length === 0)
                                {
                                    dataExport.push([ data.idAnalisis, data.idLote, data.loteOrigen, data.idTanque, data.nivelIni, data.nivelFin, data.comentarios, data.fechaAlta, data.estatus, data.estatus_Revision, // Estatus Revisión
                                        data.usrAlta, data.getUseralta, data.permisoUser ? (data.estatus == 'CANCELADO' ? 'Reactivar' : 'Editar') : '', '', '', '', '', '', '', '' // Columnas de detalle vacías
                                    ]);
                                }
                                else
                                { // Si hay detalles, creamos una fila por cada detalle
                                    detalles.forEach(function(detalle)
                                    {
                                        dataExport.push([ data.idAnalisis, data.idLote, data.loteOrigen, data.idTanque, data.nivelIni, data.nivelFin, data.comentarios, data.fechaAlta, data.estatus, data.estatus_Revision, // Estatus Revisión
                                        data.usrAlta, data.getUseralta, data.permisoUser ? (data.estatus == 'CANCELADO' ? 'Reactivar' : 'Editar') : '',
                                        detalle.descParametro, detalle.valorLimiteInf, detalle.valorLimiteSup, detalle.valorAnalisis, detalle.descUnidadMedida, detalle.idAnalizador, detalle.idMetodo
                                        ]);
                                    });
                                }
                            });

                            // var csvContent = "data:text/csv;charset=utf-8,";
                            // Asegurar la codificación en UTF-8
                            var csvContent = "\uFEFF"; // BOM para UTF-8

                            dataExport.forEach(function (rowArray)
                            {
                                var row = rowArray.join(",");
                                csvContent += row + "\r\n";
                            });

                            // var encodedUri = encodeURI(csvContent);
                            var encodedUri = encodeURI("data:text/csv;charset=utf-8," + csvContent);
                            var link = document.createElement("a");
                            link.setAttribute("href", encodedUri);
                            link.setAttribute("download", "export.csv");
                            document.body.appendChild(link); // Required for FF

                            link.click();
                        });

                    },
                    error: function (xhr, status, error) {
                        console.log('Error al obtner los datos: ' + error);
                    }
                });
            });
        });

    </script>
}
